// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	domain "movieReview/review/domain"

	mock "github.com/stretchr/testify/mock"
)

// ReviewRepository is an autogenerated mock type for the ReviewRepository type
type ReviewRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: m
func (_m *ReviewRepository) Create(m domain.Review) (domain.Review, error) {
	ret := _m.Called(m)

	var r0 domain.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Review) (domain.Review, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(domain.Review) domain.Review); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	if rf, ok := ret.Get(1).(func(domain.Review) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByMovieId provides a mock function with given fields: params
func (_m *ReviewRepository) FindAllByMovieId(params domain.FindAllParams) ([]domain.Response, error) {
	ret := _m.Called(params)

	var r0 []domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.FindAllParams) ([]domain.Response, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(domain.FindAllParams) []domain.Response); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.FindAllParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReviewRepository creates a new instance of ReviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewRepository {
	mock := &ReviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
