// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	domain "movieReview/movie/domain"

	mock "github.com/stretchr/testify/mock"
)

// MovieUseCase is an autogenerated mock type for the MovieUseCase type
type MovieUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *MovieUseCase) Create(req domain.CreateRequest) (domain.Response, error) {
	ret := _m.Called(req)

	var r0 domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CreateRequest) (domain.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.CreateRequest) domain.Response); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(domain.Response)
	}

	if rf, ok := ret.Get(1).(func(domain.CreateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MovieUseCase) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: params
func (_m *MovieUseCase) FindAll(params domain.FindAllParams) ([]domain.Response, error) {
	ret := _m.Called(params)

	var r0 []domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.FindAllParams) ([]domain.Response, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(domain.FindAllParams) []domain.Response); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.FindAllParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByScore provides a mock function with given fields: params
func (_m *MovieUseCase) FindAllByScore(params domain.PaginationParams) ([]domain.ScoreRankResponse, error) {
	ret := _m.Called(params)

	var r0 []domain.ScoreRankResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.PaginationParams) ([]domain.ScoreRankResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(domain.PaginationParams) []domain.ScoreRankResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ScoreRankResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.PaginationParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *MovieUseCase) FindById(id string) (domain.Response, error) {
	ret := _m.Called(id)

	var r0 domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Response); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Response)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, req
func (_m *MovieUseCase) Update(id string, req domain.CreateRequest) (domain.Response, error) {
	ret := _m.Called(id, req)

	var r0 domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.CreateRequest) (domain.Response, error)); ok {
		return rf(id, req)
	}
	if rf, ok := ret.Get(0).(func(string, domain.CreateRequest) domain.Response); ok {
		r0 = rf(id, req)
	} else {
		r0 = ret.Get(0).(domain.Response)
	}

	if rf, ok := ret.Get(1).(func(string, domain.CreateRequest) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMovieUseCase creates a new instance of MovieUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieUseCase {
	mock := &MovieUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
